# -*- coding: utf-8 -*-
"""Omics-CNN T-test Covid_19

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12uN1iokHhxJycVyeZcN2qD5OZFZvlhq4
"""

!pip install Biopython

!pip install bioinfokit

from google.colab import files 
uploaded = files.upload()

import pandas as pd
import io

ds=pd.read_excel((uploaded['olink_covid_outcome.xlsx']), index_col=None, header=None)
print(ds.shape)
print(ds.head())

from scipy import stats
import numpy as np
ds=np.transpose(ds)
data=np.array(ds.iloc[1:,:])
columns=ds.iloc[0,:]

dataFrame=pd.DataFrame(data,columns=columns)
print(dataFrame)

#Check if more than 30% is empty or null value
dataFrame.isna().sum() /len(dataFrame)

perc = 30.0  # Like N %
min_count =  int(((100-perc)/100)*dataFrame.shape[0] + 1)
dataFrame = dataFrame.dropna(axis=1,thresh=min_count)

#perform Knn for the missing values
from sklearn.impute import KNNImputer

imputer = KNNImputer(n_neighbors=5)
imputed = imputer.fit_transform(dataFrame)
dataFrame = pd.DataFrame(imputed, columns=dataFrame.columns)
ds = pd.DataFrame(imputed, columns=dataFrame.columns)

dataFrame.isna().sum() /len(dataFrame)

#T-TEST
from scipy import stats
import numpy as np

df1=dataFrame[dataFrame['Patient outcome']==1]
df2=dataFrame[dataFrame['Patient outcome']==0]
l=[]
l2=[]
p_array=[]
l3=[]
listofgenes=[col for col in dataFrame.columns if  (col!='Patient outcome')]

sunolo=0
list_values=[]
for x in listofgenes:
    #l.append(stats.ttest_ind(df1[x],df2[x], equal_var=False))
    tStat, pValue = stats.ttest_ind(df1[x],df2[x], equal_var=False)
    list_values.append(pValue)
    if(pValue<0.05):
      sunolo+=1
      l2.append(x)
      l3.append(x)
      p_array.append(pValue)
Z=[x for _,x in sorted(zip(p_array,l3))]
#print(Z)
#print("P-values ",sorted(p_array))
geneNames=[]
names2=[]
for x in range (len(Z)):
  #names2.append(dataFrame.iloc[0,Z[x]])
  names2.append(Z[x])
data=[]

print(len(l2))
ds_new=np.transpose(dataFrame)
#print(ds_new)
columns=ds_new.columns.tolist()
for i in range (len(Z)):
  values=ds_new.loc[Z[i],:]  
  data.append(values)

dataFrame=np.transpose(pd.DataFrame(data,Z))
print(dataFrame.shape)
#attribute_name=dataFrame.columns.tolist()
dataFrame['Patient outcome']=ds_new.loc['Patient outcome',:]
outcome=dataFrame['Patient outcome']
dataFrame.head()

#export to excel

dataFrame.to_excel('Olink_covid_UpDownRegulated.xlsx', index = False,header=True)
files.download('Olink_covid_UpDownRegulated.xlsx')

from numpy.ma.core import append
import math
from bioinfokit import analys, visuz
value1=[]
value2=[]
log2FC=[]

geneNames=list(ds.columns.values)
geneNames.remove('Patient outcome')

#new_df= pd.DataFrame(dataFrame2.values[1:], columns=headers)
for gene in geneNames:
  x1=ds.loc[ds['Patient outcome']==1,gene].mean()
  x2=ds.loc[ds['Patient outcome']==0,gene].mean()
  value1.append(x1)
  value2.append(x2)
  if(x1==0):
    log2=0
  else:
    log2 = math.log2(x1/x2)
  log2FC.append(log2)



list_of_genes_pvalue = list(zip(geneNames,list_values,value1,value2,log2FC))
df_genes = pd.DataFrame(list_of_genes_pvalue,columns = ['Name', 'P-value','value1','value2','log2FC']) 

extremeName=[]
#or df_genes.at[row,'log2FC']<0
for row in range(len(df_genes)):
  if df_genes.at[row,'log2FC']<=-0.3:
    extremeName.append(df_genes.at[row,'Name'])
#print(extremeName)

names3={'APOM':'APOM','Fever_Sympt':'Fever_Sympt','PCSK9':'PCSK9','NUCB2':'NUCB2','GI_Symp':'GI_Symp','PARK7':'PARK7','SRP14':'SRP14','DPP10':'DPP10','F7':'F7','BCAM':'BCAM','CD1C':'CD1C','HEART':'HEART','KIDNEY':'KIDNEY','WHO0_4':'WHO0_4','abs_lymph_0_cat':'abs_lymph_0_cat','XPNPEP2':'XPNPEP2','Fever_Sympt':'Fever_Sympt'}

visuz.GeneExpression.volcano(df=df_genes, lfc='log2FC', pv='P-value', dotsize=10,lfc_thr=(0,0),pv_thr=(0.05,0.01),show=True,ar=0,plotlegend=True,color=('green', 'grey', 'red'),legendpos='upper right',legendanchor=(1.46,1),geneid='Name',genenames=names3,dim=(10, 10) ,sign_line=True)

from scipy.cluster.hierarchy import dendrogram, linkage
from plotly.offline import init_notebook_mode, iplot
from Bio.Cluster import treecluster 
import plotly.graph_objs as go
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter, defaultdict

dataframe_new=(dataFrame.drop(['Patient outcome'],axis=1)).transpose()
list2=dataframe_new.index.to_list()
D=dataframe_new.iloc[:,:].values
Z = linkage(D, method='ward', metric='euclidean')
plt.figure(figsize=(10, 6))
ax = plt.subplot()
plt.subplots_adjust(left=0.07, bottom=0.3, right=0.98, top=0.95,
wspace=0, hspace=0)
plt.xlabel('Attributes')
plt.ylabel('Distance')
d=dendrogram(Z, leaf_rotation=90., leaf_font_size=10.)

from scipy.cluster.hierarchy import leaves_list
list=leaves_list(Z)
print (len(list))

import tensorflow as tf
import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.callbacks import EarlyStopping,LearningRateScheduler
import keras
from tensorflow.python.keras.layers import Dense,Dropout, Flatten,Conv1D, AveragePooling1D,InputLayer
from tensorflow.python.keras import Sequential
from tensorflow.keras.optimizers import SGD
import numpy as np
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from keras.utils import np_utils
import datetime
from sklearn.metrics import classification_report

columns=[]
attribute_name=[]
columns=[list2[i] for i in list]
print(columns)
data=[]
df=np.transpose(dataframe_new)
for i in (list):
  values=df.iloc[:,i]
  data.append(values)
ds_new=np.transpose(pd.DataFrame(data,columns))

ds_new['Patient outcome']=outcome
print(ds_new)

rows,columns=ds_new.shape



from sklearn import preprocessing
lb = preprocessing.LabelBinarizer()

# learning rate schedule
import math
#LearningRate = InitialLearningRate * DropRate^floor(Epoch / EpochDrop),floor=the integer not greater than Epoch/EpochDrop
def step_decay(epoch):
	initial_lrate = 0.01
	drop = 0.5
	epochs_drop = 100.0
	lrate = initial_lrate * math.pow(drop, math.floor((1+epoch)/epochs_drop))
	return lrate
from tensorflow.python.framework.ops import disable_eager_execution

X=ds_new.drop(['Patient outcome'],axis=1)
X=X.values.reshape(X.shape[0],X.shape[1],1)


Y=ds_new['Patient outcome']
Y=Y.astype('int')


#n_timesteps, n_features, n_outputs = X_train.shape[0], X_train.shape[1], Y_train.shape[1]
model = Sequential()
model.add(Conv1D(filters=64,kernel_size=10, strides=1,activation= 'relu',input_shape=(X.shape[1],1),padding='same'))
model.add(Dropout(0.2))
model.add(AveragePooling1D(pool_size=2))
model.add(Conv1D(64, 10, strides=1,activation= 'relu',padding='same'))
model.add(AveragePooling1D(pool_size=2))
model.add(Dense(units=500, activation='relu'))
model.add(Dense(units=250, activation='relu', name='visualized_layer'))
model.add(Flatten())
model.add(Dropout(0.2))
model.add(Dense(units=134, activation='relu'))
model.add(Dense(units=2, activation = 'softmax'))

sgd = SGD(learning_rate=0.0001)
# Compile model
lrate = LearningRateScheduler(step_decay)
print(model.summary())
#model.compile( loss='mean_squared_error' , optimizer='adam' , metrics=[ 'accuracy' ])
model.compile( loss='sparse_categorical_crossentropy' , optimizer='sgd' , metrics=[ 'accuracy' ])
es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=50)

# Κάνω Stratified Cross Validation για την αξιολόγηση του μοντέλου
from sklearn import model_selection
from sklearn.metrics import precision_recall_curve, auc, roc_curve
import matplotlib.pyplot as plt
from scipy import interp


k_fold = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)


cvscores=[]
y_real = []
y_proba = []

mean_tpr = 0.0
mean_fpr = np.linspace(0, 1, 100)
all_tpr = []
model2=model
i=0
for k_train_index, k_test_index in k_fold.split(X, Y):
  history=model.fit(X[k_train_index,:], Y[k_train_index],validation_data=(X[k_test_index,:],Y[k_test_index]) ,epochs=300,batch_size=32)
  probas_ =model.predict_proba(X[k_test_index,:])
  results = model.evaluate(X[k_train_index,:], Y[k_train_index], verbose=0)
  print('train loss,train acc: ',results)
  results = model.evaluate(X[k_test_index,:],Y[k_test_index], batch_size=30)
  print('test loss, test acc:', results)
  cvscores.append(results[1] * 100)
  # Compute ROC curve and area the curve
  fpr, tpr, thresholds = roc_curve(Y[k_test_index], probas_[:, 1])
  mean_tpr += interp(mean_fpr, fpr, tpr)
  mean_tpr[0] = 0.0
  roc_auc = auc(fpr, tpr)
  plt.plot(fpr, tpr, lw=1, label='ROC fold %d (area = %0.2f)' % (i, roc_auc))
  i=i+1

plt.plot([0, 1], [0, 1], '--', color=(0.6, 0.6, 0.6), label='Luck')
mean_tpr /= 5
mean_tpr[-1] = 1.0
mean_auc = auc(mean_fpr, mean_tpr)
plt.plot(mean_fpr, mean_tpr, 'k--',label='Mean ROC (area = %0.2f)' % mean_auc, lw=2)

plt.xlim([-0.05, 1.05])
plt.ylim([-0.05, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic example')
plt.legend(loc="lower right")
plt.show()


val_loss, val_acc = model.evaluate(X, Y)
print('Model accuracy of whole dataset as test dataset',val_acc)
y_pred = model.predict(X, batch_size=10, verbose=1)
y_pred_bool = np.argmax(y_pred, axis=1)
print(classification_report(Y, y_pred_bool))
print("Mean performance of model %.2f%% (+/- %.2f%%)" % (np.mean(cvscores), np.std(cvscores)))

example=x=X[0:1]

predict = model.predict(example)
target_class = np.argmax(predict[0])

last_conv = model.get_layer('conv1d_1')
grad_model = tf.keras.models.Model([model.inputs], [last_conv.output, model.output])
with tf.GradientTape() as tape:
    conv_outputs, predictions = grad_model(example) 
    loss = predictions[:, target_class]

output = conv_outputs[0]
grads = tape.gradient(loss, conv_outputs)[0]

gradient = grads[:,0]

plt.plot(gradient) 
plt.show() 

gradient_map_image = [gradient,gradient,gradient,gradient,gradient]
plt.imshow(gradient_map_image) # vmin=-1, vmax=1) #cmap='gray
plt.colorbar()

guided_grads = tf.cast(output > 0, 'float32') * tf.cast(grads > 0, 'float32') * grads
guide_grads_example = guided_grads[:,0]
plt.plot(guide_grads_example) 
plt.show() 

guided_grads_image = [guide_grads_example,guide_grads_example,guide_grads_example, guide_grads_example,guide_grads_example]
plt.imshow(guided_grads_image) # vmin=-1, vmax=1) #cmap='gray
plt.colorbar()